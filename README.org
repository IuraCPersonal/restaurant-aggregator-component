#+TITLE: RESTAURANT AGGREGATOR SERVER
#+AUTHOR: FCIM FAF 203 Cius Iurie

** TABLE OF CONTENTS :toc:
  - [[#instalation][INSTALATION]]
  - [[#about][ABOUT]]
  - [[#more-details][MORE DETAILS]]
  - [[#system-design-and-requirements][SYSTEM DESIGN AND REQUIREMENTS]]
  - [[#links][LINKS]]
  - [[#contact][CONTACT]]

*** =NOTE:= This is the 40% implementation of the second laboratory work for the PR course. 

** INSTALATION

In order to run the docker servers using docker compose do the following steps:

*** Linux/Unix

1. Open your terminal and paste:

#+BEGIN_SRC bash
$ mkdir restaurant-simulator

$ git clone https://github.com/IuraCPersonal/dining-hall-component restaurant-simulator/dining-hall-component
$ git clone https://github.com/IuraCPersonal/kitchen-component restaurant-simulator/kitchen-component

$ cd restaurant-simulator
$ touch docker-compose.yml
#+END_SRC

2. Paste the following into the =docker-compose.yml= file

#+BEGIN_SRC yaml
version: '3'

services:
  kitchen_1:
    build: ./kitchen-server
    ports:
      - "3111:3111"
    environment:
      - USING_DOCKER_COMPOSE=1
      - RESTAURANT_ID=1
    depends_on: 
      - restaurant-aggregator
  kitchen_2:
    build: ./kitchen-server
    ports:
      - "3222:3222"
    environment:
      - USING_DOCKER_COMPOSE=1
      - RESTAURANT_ID=2
    depends_on: 
      - restaurant-aggregator
  restaurant-aggregator:
    build: ./restaurant-aggregator-server
    ports:
      - "7777:7777"
    environment:
      - USING_DOCKER_COMPOSE=1
  client-server:
    build: ./client-server
    ports:
      - "3333:3333"
    environment:
      - USING_DOCKER_COMPOSE=1
    depends_on: 
      - restaurant-aggregator
      - kitchen_1
      - kitchen_2
#+END_SRC

3. Start the Docker service:

#+BEGIN_SRC bash
$ sudo systemctl start docker
#+END_SRC

4. Then run the command:

#+BEGIN_SRC bash
$ sudo docker compose up --build
#+END_SRC

** ABOUT

=Food ordering= service is connection link between clients and restaurant . In order to order some foods, client
communicates with food ordering services and post generated orders. Food ordering service receives orders requests
from clients and post order to dedicated restaurant.

=Food ordering= main work unit is =Orders Manager= it implements communication between restaurant and clients in
process of food ordering. Order Manager handles orders requests generated by clients and send received orders to
dedicated =restaurants=.

One of the important feature of food ordering service is aggregation of data from all restaurants and clients.

** MORE DETAILS

Food ordering service, plays role of data aggregator. All restaurants have to register in Food ordering service and store
multiple restaurants menu in order to provide each restaurant menu to client.

Food ordering service should be able to handle registration of new restaurant at any time of of the simulation. Also Food
ordering service should be able to handle cases when some restaurant will fail and will not be able to prepare more orders or
will totally shutdown.

=Food ordering= service workflow:

- receives client orders and send that orders to dedicated restaurants
- aggregates response from all restaurants into single response
- sends that response back to client .
- receives client order ratings and propagate ratings to the restaurants
- calculates simulation average rating based on restaurants average rating

=Food ordering= service is responsible for calculating simulation average rating. It should aggregate all restaurants ratings and
calculates(updates) the average after each rating being submitted by the client

** SYSTEM DESIGN AND REQUIREMENTS

In this simulation we will have multiple clients communicating with food ordering service and it should communicate with multiple restaurants.

For this simulation we will use multiple restaurants, each restaurant being replica of same restaurant implementation but with different menu and configuration of number of tables, cooks and cooking apparatus.

Your setup have to include:

1. One client service with multiple work units (threads) of clients.
2. One food ordering service.
3. Multiple restaurants. Each restaurant is represented by dinning hall and kitchen. Your simulation have to include at least 2 restaurants with various setup. Recommended number of restaurants is 4.

** LINKS

- [[https://github.com/IuraCPersonal/pr][Main Repository]]
- [[https://github.com/IuraCPersonal/dining-hall-component][The Dining Hall Server]]
- [[https://github.com/IuraCPersonal/kitchen-component][The Kitchen Server]]
- [[https://github.com/IuraCPersonal/client-component][Client Server]]

** CONTACT

If you have any question, please contact me through email: =iurie.cius@isa.utm.md=.
